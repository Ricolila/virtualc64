<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="thread_8md" kind="file" language="Markdown">
    <compoundname>thread.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Thread<sp/>model</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>lauching,<sp/>the<sp/>emulator<sp/>runs<sp/>as<sp/>a<sp/>single<sp/>thread<sp/>alongside<sp/>the<sp/>GUI.<sp/>The<sp/>thread<sp/>exists<sp/>during<sp/>the<sp/>lifetime<sp/>of<sp/>the<sp/>application,<sp/>but<sp/>may<sp/>not<sp/>compute<sp/>new<sp/>frames<sp/>all<sp/>the<sp/>time.<sp/>The<sp/>exact<sp/>behavior<sp/>is<sp/>controlled<sp/>by<sp/>the<sp/>internal<sp/>state.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>The<sp/>following<sp/>states<sp/>are<sp/>distinguishedd:</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Off:**<sp/>The<sp/>emulator<sp/>is<sp/>turned<sp/>off</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Paused:**<sp/>The<sp/>emulator<sp/>is<sp/>turned<sp/>on<sp/>but<sp/>not<sp/>running</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Running:**<sp/>The<sp/>emulator<sp/>is<sp/>turned<sp/>on<sp/>and<sp/>running</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Suspended:**<sp/>The<sp/>emulator<sp/>is<sp/>paused<sp/>for<sp/>a<sp/>short<sp/>period<sp/>of<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/>-<sp/>**Halted:**<sp/>The<sp/>emulator<sp/>is<sp/>shutting<sp/>down</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>@image<sp/>html<sp/>thread.png</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>The<sp/>thread<sp/>executes<sp/>an<sp/>infinite<sp/>loop<sp/>which<sp/>periodically<sp/>calls<sp/>function<sp/>vc64::Thread::execute.<sp/>After<sp/>each<sp/>iteration,<sp/>the<sp/>thread<sp/>is<sp/>put<sp/>to<sp/>sleep<sp/>to<sp/>synchronize<sp/>timing.</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>##<sp/>Suspend<sp/>/<sp/>Resume</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>The<sp/>Thread<sp/>class<sp/>provides<sp/>a<sp/>suspend-resume<sp/>mechanism<sp/>for<sp/>pausing<sp/>the<sp/>thread<sp/>temporarily.<sp/>This<sp/>functionality<sp/>is<sp/>utilized<sp/>frequently<sp/>by<sp/>the<sp/>GUI<sp/>to<sp/>carry<sp/>out<sp/>atomic<sp/>operations<sp/>that<sp/>cannot<sp/>be<sp/>performed<sp/>while<sp/>the<sp/>emulator<sp/>is<sp/>running.<sp/>To<sp/>pause<sp/>the<sp/>emulator<sp/>temporarily,<sp/>the<sp/>critical<sp/>code<sp/>section<sp/>can<sp/>be<sp/>embedded<sp/>in<sp/>a<sp/>suspend/resume<sp/>block<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>~~~{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>suspend();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Modify<sp/>the<sp/>internal<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>resume();</highlight></codeline>
<codeline><highlight class="normal"><sp/>~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>It<sp/>it<sp/>safe<sp/>to<sp/>nest<sp/>multiple<sp/>suspend/resume<sp/>blocks,<sp/>but<sp/>it<sp/>is<sp/>essential<sp/>that<sp/>each<sp/>call<sp/>to<sp/>[suspend](@ref<sp/>vc64::Thread::suspend)<sp/>is<sp/>followed<sp/>by<sp/>a<sp/>call<sp/>to<sp/>Thread<sp/>class<sp/>[resume](@ref<sp/>vc64::Thread::resume).<sp/>As<sp/>a<sp/>result,<sp/>the<sp/>critical<sp/>code<sp/>section<sp/>must<sp/>not<sp/>be<sp/>exited<sp/>in<sp/>the<sp/>middle,<sp/>e.g.,<sp/>by<sp/>throwing<sp/>an<sp/>exception.<sp/>It<sp/>is<sp/>therefore<sp/>recommended<sp/>to<sp/>use<sp/>the<sp/>`SUSPENDED`<sp/>macro<sp/>which<sp/>is<sp/>exit-safe.<sp/>It<sp/>is<sp/>used<sp/>in<sp/>the<sp/>following<sp/>way:</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>~~~{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>SUSPENDED</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Modify<sp/>the<sp/>internal<sp/>state,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>return,<sp/>or<sp/>throw<sp/>an<sp/>exceptions<sp/>as<sp/>you<sp/>like</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>##<sp/>Synchronization</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>The<sp/>Thread<sp/>class<sp/>is<sp/>responsible<sp/>for<sp/>timing<sp/>synchronization.<sp/>I.e.,<sp/>it<sp/>has<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>proper<sp/>amount<sp/>of<sp/>frames<sp/>are<sp/>executed<sp/>per<sp/>second.<sp/>To<sp/>synchronize<sp/>timing,<sp/>the<sp/>thread<sp/>waits<sp/>for<sp/>an<sp/>external<sp/>wake-up<sp/>signal.<sp/>When<sp/>the<sp/>wake-up<sp/>signal<sp/>comes<sp/>in<sp/>(by<sp/>calling<sp/>[wakeUp](@ref<sp/>vc64::Thread::wakeUp),<sp/>the<sp/>thread<sp/>computes<sp/>the<sp/>computes<sp/>computes<sp/>all<sp/>missing<sp/>frames.<sp/>If<sp/>the<sp/>number<sp/>of<sp/>missing<sp/>frames<sp/>exceeds<sp/>a<sp/>threshold,<sp/>the<sp/>thread<sp/>resynchronizes<sp/>itself<sp/>by<sp/>calling<sp/>[resync](@ref<sp/>vc64::Thread::resync).</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>##<sp/>Warp<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>To<sp/>speed<sp/>up<sp/>emulation<sp/>(e.g.,<sp/>during<sp/>disk<sp/>accesses),<sp/>the<sp/>emulator<sp/>may<sp/>be<sp/>put<sp/>into<sp/>warp<sp/>mode.<sp/>In<sp/>this<sp/>mode,<sp/>timing<sp/>synchronization<sp/>is<sp/>disabled<sp/>causing<sp/>the<sp/>emulator<sp/>to<sp/>run<sp/>as<sp/>fast<sp/>as<sp/>possible.</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>Similar<sp/>to<sp/>warp<sp/>mode,<sp/>the<sp/>emulator<sp/>may<sp/>be<sp/>put<sp/>into<sp/>track<sp/>mode.<sp/>This<sp/>mode<sp/>is<sp/>enabled<sp/>when<sp/>the<sp/>GUI<sp/>debugger<sp/>is<sp/>opend<sp/>and<sp/>disabled<sp/>when<sp/>the<sp/>debugger<sp/>is<sp/>closed.<sp/>In<sp/>track<sp/>mode,<sp/>several<sp/>time-consuming<sp/>tasks<sp/>are<sp/>performed<sp/>that<sp/>are<sp/>usually<sp/>left<sp/>out.<sp/>E.g.,<sp/>the<sp/>CPU<sp/>tracks<sp/>all<sp/>executed<sp/>instructions<sp/>and<sp/>stores<sp/>the<sp/>recorded<sp/>information<sp/>in<sp/>a<sp/>trace<sp/>buffer.</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
    </programlisting>
    <location file="topics/thread.md"/>
  </compounddef>
</doxygen>
